{
    "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "priceFeedAddress",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "inputs": [],
            "name": "FundMe__NotOwner",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "MINIMUM_USD",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "cheaperWithdraw",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "fund",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "funder",
                    "type": "address"
                }
            ],
            "name": "getAddressToAmountFunded",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "index",
                    "type": "uint256"
                }
            ],
            "name": "getFunder",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getOwner",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getPriceFeed",
            "outputs": [
                {
                    "internalType": "contract AggregatorV3Interface",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "withdraw",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        }
    ],
    "transactionHash": "0x7872bc878111ff82ffda8569966a43a791c1398b722c22f903c3c57e7303f504",
    "receipt": {
        "to": null,
        "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
        "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "transactionIndex": 0,
        "gasUsed": "1009635",
        "logsBloom": "0x
        "blockHash": "0xbdad4b2b71ca6994c822f64b886f7fbe47dc01cf79d8dd5af0749aca5cf8b78e",
        "transactionHash": "0x7872bc878111ff82ffda8569966a43a791c1398b722c22f903c3c57e7303f504",
        "logs": [],
        "blockNumber": 2,
        "cumulativeGasUsed": "1009635",
        "status": 1,
        "byzantium": true
    },
    "args": ["0x5FbDB2315678afecb367f032d93F642f64180aa3"],
    "numDeployments": 1,
    "solcInputHash": "131e1fd2bcab04e9e5d316616940d901",
    "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Niraj Patil\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"constructor receive  fallback eternal public internal  private view/pure\"}},\"notice\":\"This contract is to demo a a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// pragma\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\n//imports\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport \\\"./PriceConverter.sol\\\";\\r\\n\\r\\n// Error Codes\\r\\nerror FundMe__NotOwner();\\r\\n\\r\\n// Interfaces, Libraries, Contracts\\r\\n// NatSpec - we added tags as to automatically create documentation by natspec\\r\\n/** @title A contract for crowd funding\\r\\n * @author Niraj Patil\\r\\n * @notice This contract is to demo a a sample funding contract\\r\\n * @dev This implements price feeds as our library\\r\\n */\\r\\ncontract FundMe {\\r\\n    // type decllrations\\r\\n    using PriceConverter for uint256;\\r\\n\\r\\n    // State variables\\r\\n    uint256 public constant MINIMUM_USD = 50 * 1e18; // people should know the minimum usd so we have kept it public\\r\\n    address private immutable i_owner; // people don't need to know the owner here so we will keep this private\\r\\n    address[] private s_funders;\\r\\n    mapping(address => uint256) private s_addressToAmountFunded;\\r\\n    AggregatorV3Interface private s_priceFeed;\\r\\n\\r\\n    // modifier\\r\\n    modifier onlyOwner() {\\r\\n        //require(msg.sender == i_owner, \\\"Sender is not the owner\\\");\\r\\n        if (msg.sender != i_owner) {\\r\\n            revert FundMe__NotOwner();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Functions Order\\r\\n    /** constructor\\r\\n    receive \\r\\n    fallback\\r\\n    eternal\\r\\n    public\\r\\n    internal \\r\\n    private\\r\\n    view/pure\\r\\n     */\\r\\n\\r\\n    constructor(address priceFeedAddress) {\\r\\n        // storing address so that only the owner will be able to call specific funtions\\r\\n        i_owner = msg.sender;\\r\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\r\\n    }\\r\\n\\r\\n    // receive() external payable {\\r\\n    //     fund();\\r\\n    // }\\r\\n\\r\\n    // fallback() external payable {\\r\\n    //     fund();\\r\\n    // }\\r\\n\\r\\n    function fund() public payable {\\r\\n        require(\\r\\n            // here initial paramaeter that is passed to this method is msg.value, priceFeed will be the secong parameter to this function\\r\\n            msg.value.getConversionRate(s_priceFeed) > MINIMUM_USD,\\r\\n            \\\"Not enough amount\\\"\\r\\n        );\\r\\n        s_funders.push(msg.sender);\\r\\n        s_addressToAmountFunded[msg.sender] = msg.value;\\r\\n    }\\r\\n\\r\\n    function withdraw() public onlyOwner {\\r\\n        // for loop\\r\\n        for (\\r\\n            uint256 funderIndex = 0;\\r\\n            funderIndex < s_funders.length;\\r\\n            funderIndex++\\r\\n        ) {\\r\\n            address funder = s_funders[funderIndex];\\r\\n            s_addressToAmountFunded[funder] = 0;\\r\\n        }\\r\\n        // reset the array\\r\\n        s_funders = new address[](0);\\r\\n\\r\\n        // call, it returns 2 variable, booleand and bytes object\\r\\n        (bool callSuccess, ) = payable(msg.sender).call{\\r\\n            value: address(this).balance\\r\\n        }(\\\"\\\");\\r\\n        require(callSuccess, \\\"call Failed\\\");\\r\\n    }\\r\\n\\r\\n    // we are creating new function to cost less gas compared to the withdraw\\r\\n    function cheaperWithdraw() public payable onlyOwner {\\r\\n        address[] memory funders = s_funders;\\r\\n        // Mappings can't be in memory\\r\\n        for (\\r\\n            uint256 funderIndex = 0;\\r\\n            funderIndex < funders.length;\\r\\n            funderIndex++\\r\\n        ) {\\r\\n            address funder = funders[funderIndex];\\r\\n            s_addressToAmountFunded[funder] = 0;\\r\\n        }\\r\\n        s_funders = new address[](0);\\r\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success);\\r\\n    }\\r\\n\\r\\n    function getOwner() public view returns (address) {\\r\\n        return i_owner;\\r\\n    }\\r\\n\\r\\n    function getFunder(uint256 index) public view returns (address) {\\r\\n        return s_funders[index];\\r\\n    }\\r\\n\\r\\n    function getAddressToAmountFunded(address funder)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return s_addressToAmountFunded[funder];\\r\\n    }\\r\\n\\r\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\r\\n        return s_priceFeed;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xcd6cc39a61b7f286c48207bc701686a66b13313839a09f9b63ff3cacab44526c\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\nlibrary PriceConverter {\\r\\n    function getPrice(AggregatorV3Interface priceFeed)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // abi\\r\\n        // address - 0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\\r\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\\r\\n        //     0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\\r\\n        // );\\r\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\r\\n        // ETH in terms of USD\\r\\n        // 3000.00000000\\r\\n        return uint256(price * 1e18); // 1 ** 10\\r\\n    }\\r\\n\\r\\n    function getConversionRate(\\r\\n        uint256 ethAmount,\\r\\n        AggregatorV3Interface priceFeed\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 ethPrice = getPrice(priceFeed);\\r\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\\r\\n        return ethAmountInUsd;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0548af35c219d3a7d197f6421c0e56356ddffbe3de122f7886c9b1bf2ff0add8\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x60a06040523480156200001157600080fd5b506040516200126c3803806200126c833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c6110e662000186600039600081816101f101528181610440015281816105b801526107ae01526110e66000f3fe60806040526004361061007b5760003560e01c80639e87a5cd1161004e5780639e87a5cd1461012a578063b60d428814610155578063be2693f01461015f578063d7b4750c146101695761007b565b80630343fb25146100805780633ccfd60b146100bd5780636b69a592146100d4578063893d20e8146100ff575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610a74565b6101a6565b6040516100b49190610aba565b60405180910390f35b3480156100c957600080fd5b506100d26101ef565b005b3480156100e057600080fd5b506100e961042f565b6040516100f69190610aba565b60405180910390f35b34801561010b57600080fd5b5061011461043c565b6040516101219190610ae4565b60405180910390f35b34801561013657600080fd5b5061013f610464565b60405161014c9190610b5e565b60405180910390f35b61015d61048e565b005b6101676105b6565b005b34801561017557600080fd5b50610190600480360381019061018b9190610ba5565b610844565b60405161019d9190610ae4565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610274576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561031f57600080828154811061029957610298610bd2565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061031790610c30565b915050610277565b50600067ffffffffffffffff81111561033b5761033a610c79565b5b6040519080825280602002602001820160405280156103695781602001602082028036833780820191505090505b506000908051906020019061037f92919061096a565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516103a690610cd9565b60006040518083038185875af1925050503d80600081146103e3576040519150601f19603f3d011682016040523d82523d6000602084013e6103e8565b606091505b505090508061042c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042390610d4b565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006104cd600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461088b90919063ffffffff16565b1161050d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050490610db7565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461063b576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156106be57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610674575b5050505050905060005b81518110156107495760008282815181106106e6576106e5610bd2565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061074190610c30565b9150506106c8565b50600067ffffffffffffffff81111561076557610764610c79565b5b6040519080825280602002602001820160405280156107935781602001602082028036833780820191505090505b50600090805190602001906107a992919061096a565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516107f090610cd9565b60006040518083038185875af1925050503d806000811461082d576040519150601f19603f3d011682016040523d82523d6000602084013e610832565b606091505b505090508061084057600080fd5b5050565b600080828154811061085957610858610bd2565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080610897836108c7565b90506000670de0b6b3a764000085836108b09190610dd7565b6108ba9190610e60565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561091057600080fd5b505afa158015610924573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109489190610f1e565b505050915050670de0b6b3a7640000816109629190610f99565b915050919050565b8280548282559060005260206000209081019282156109e3579160200282015b828111156109e25782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061098a565b5b5090506109f091906109f4565b5090565b5b80821115610a0d5760008160009055506001016109f5565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a4182610a16565b9050919050565b610a5181610a36565b8114610a5c57600080fd5b50565b600081359050610a6e81610a48565b92915050565b600060208284031215610a8a57610a89610a11565b5b6000610a9884828501610a5f565b91505092915050565b6000819050919050565b610ab481610aa1565b82525050565b6000602082019050610acf6000830184610aab565b92915050565b610ade81610a36565b82525050565b6000602082019050610af96000830184610ad5565b92915050565b6000819050919050565b6000610b24610b1f610b1a84610a16565b610aff565b610a16565b9050919050565b6000610b3682610b09565b9050919050565b6000610b4882610b2b565b9050919050565b610b5881610b3d565b82525050565b6000602082019050610b736000830184610b4f565b92915050565b610b8281610aa1565b8114610b8d57600080fd5b50565b600081359050610b9f81610b79565b92915050565b600060208284031215610bbb57610bba610a11565b5b6000610bc984828501610b90565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c3b82610aa1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610c6e57610c6d610c01565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610cc3600083610ca8565b9150610cce82610cb3565b600082019050919050565b6000610ce482610cb6565b9150819050919050565b600082825260208201905092915050565b7f63616c6c204661696c6564000000000000000000000000000000000000000000600082015250565b6000610d35600b83610cee565b9150610d4082610cff565b602082019050919050565b60006020820190508181036000830152610d6481610d28565b9050919050565b7f4e6f7420656e6f75676820616d6f756e74000000000000000000000000000000600082015250565b6000610da1601183610cee565b9150610dac82610d6b565b602082019050919050565b60006020820190508181036000830152610dd081610d94565b9050919050565b6000610de282610aa1565b9150610ded83610aa1565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e2657610e25610c01565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e6b82610aa1565b9150610e7683610aa1565b925082610e8657610e85610e31565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610eb081610e91565b8114610ebb57600080fd5b50565b600081519050610ecd81610ea7565b92915050565b6000819050919050565b610ee681610ed3565b8114610ef157600080fd5b50565b600081519050610f0381610edd565b92915050565b600081519050610f1881610b79565b92915050565b600080600080600060a08688031215610f3a57610f39610a11565b5b6000610f4888828901610ebe565b9550506020610f5988828901610ef4565b9450506040610f6a88828901610f09565b9350506060610f7b88828901610f09565b9250506080610f8c88828901610ebe565b9150509295509295909350565b6000610fa482610ed3565b9150610faf83610ed3565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610fee57610fed610c01565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561102b5761102a610c01565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561106857611067610c01565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156110a5576110a4610c01565b5b82820290509291505056fea26469706673582212207a3174e6d10dd01ff62cd8c0fecf7b83313c11e4e0dca4d7d9b7ff773be7cea364736f6c63430008080033",
    "deployedBytecode": "0x60806040526004361061007b5760003560e01c80639e87a5cd1161004e5780639e87a5cd1461012a578063b60d428814610155578063be2693f01461015f578063d7b4750c146101695761007b565b80630343fb25146100805780633ccfd60b146100bd5780636b69a592146100d4578063893d20e8146100ff575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610a74565b6101a6565b6040516100b49190610aba565b60405180910390f35b3480156100c957600080fd5b506100d26101ef565b005b3480156100e057600080fd5b506100e961042f565b6040516100f69190610aba565b60405180910390f35b34801561010b57600080fd5b5061011461043c565b6040516101219190610ae4565b60405180910390f35b34801561013657600080fd5b5061013f610464565b60405161014c9190610b5e565b60405180910390f35b61015d61048e565b005b6101676105b6565b005b34801561017557600080fd5b50610190600480360381019061018b9190610ba5565b610844565b60405161019d9190610ae4565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610274576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561031f57600080828154811061029957610298610bd2565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061031790610c30565b915050610277565b50600067ffffffffffffffff81111561033b5761033a610c79565b5b6040519080825280602002602001820160405280156103695781602001602082028036833780820191505090505b506000908051906020019061037f92919061096a565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516103a690610cd9565b60006040518083038185875af1925050503d80600081146103e3576040519150601f19603f3d011682016040523d82523d6000602084013e6103e8565b606091505b505090508061042c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042390610d4b565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006104cd600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461088b90919063ffffffff16565b1161050d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050490610db7565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461063b576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156106be57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610674575b5050505050905060005b81518110156107495760008282815181106106e6576106e5610bd2565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061074190610c30565b9150506106c8565b50600067ffffffffffffffff81111561076557610764610c79565b5b6040519080825280602002602001820160405280156107935781602001602082028036833780820191505090505b50600090805190602001906107a992919061096a565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516107f090610cd9565b60006040518083038185875af1925050503d806000811461082d576040519150601f19603f3d011682016040523d82523d6000602084013e610832565b606091505b505090508061084057600080fd5b5050565b600080828154811061085957610858610bd2565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080610897836108c7565b90506000670de0b6b3a764000085836108b09190610dd7565b6108ba9190610e60565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561091057600080fd5b505afa158015610924573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109489190610f1e565b505050915050670de0b6b3a7640000816109629190610f99565b915050919050565b8280548282559060005260206000209081019282156109e3579160200282015b828111156109e25782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061098a565b5b5090506109f091906109f4565b5090565b5b80821115610a0d5760008160009055506001016109f5565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a4182610a16565b9050919050565b610a5181610a36565b8114610a5c57600080fd5b50565b600081359050610a6e81610a48565b92915050565b600060208284031215610a8a57610a89610a11565b5b6000610a9884828501610a5f565b91505092915050565b6000819050919050565b610ab481610aa1565b82525050565b6000602082019050610acf6000830184610aab565b92915050565b610ade81610a36565b82525050565b6000602082019050610af96000830184610ad5565b92915050565b6000819050919050565b6000610b24610b1f610b1a84610a16565b610aff565b610a16565b9050919050565b6000610b3682610b09565b9050919050565b6000610b4882610b2b565b9050919050565b610b5881610b3d565b82525050565b6000602082019050610b736000830184610b4f565b92915050565b610b8281610aa1565b8114610b8d57600080fd5b50565b600081359050610b9f81610b79565b92915050565b600060208284031215610bbb57610bba610a11565b5b6000610bc984828501610b90565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c3b82610aa1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610c6e57610c6d610c01565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610cc3600083610ca8565b9150610cce82610cb3565b600082019050919050565b6000610ce482610cb6565b9150819050919050565b600082825260208201905092915050565b7f63616c6c204661696c6564000000000000000000000000000000000000000000600082015250565b6000610d35600b83610cee565b9150610d4082610cff565b602082019050919050565b60006020820190508181036000830152610d6481610d28565b9050919050565b7f4e6f7420656e6f75676820616d6f756e74000000000000000000000000000000600082015250565b6000610da1601183610cee565b9150610dac82610d6b565b602082019050919050565b60006020820190508181036000830152610dd081610d94565b9050919050565b6000610de282610aa1565b9150610ded83610aa1565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e2657610e25610c01565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e6b82610aa1565b9150610e7683610aa1565b925082610e8657610e85610e31565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610eb081610e91565b8114610ebb57600080fd5b50565b600081519050610ecd81610ea7565b92915050565b6000819050919050565b610ee681610ed3565b8114610ef157600080fd5b50565b600081519050610f0381610edd565b92915050565b600081519050610f1881610b79565b92915050565b600080600080600060a08688031215610f3a57610f39610a11565b5b6000610f4888828901610ebe565b9550506020610f5988828901610ef4565b9450506040610f6a88828901610f09565b9350506060610f7b88828901610f09565b9250506080610f8c88828901610ebe565b9150509295509295909350565b6000610fa482610ed3565b9150610faf83610ed3565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610fee57610fed610c01565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561102b5761102a610c01565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561106857611067610c01565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156110a5576110a4610c01565b5b82820290509291505056fea26469706673582212207a3174e6d10dd01ff62cd8c0fecf7b83313c11e4e0dca4d7d9b7ff773be7cea364736f6c63430008080033",
    "devdoc": {
        "author": "Niraj Patil",
        "details": "This implements price feeds as our library",
        "kind": "dev",
        "methods": {},
        "title": "A contract for crowd funding",
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {
            "constructor": {
                "notice": "constructor receive  fallback eternal public internal  private view/pure"
            }
        },
        "notice": "This contract is to demo a a sample funding contract",
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 65,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_funders",
                "offset": 0,
                "slot": "0",
                "type": "t_array(t_address)dyn_storage"
            },
            {
                "astId": 69,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_addressToAmountFunded",
                "offset": 0,
                "slot": "1",
                "type": "t_mapping(t_address,t_uint256)"
            },
            {
                "astId": 72,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_priceFeed",
                "offset": 0,
                "slot": "2",
                "type": "t_contract(AggregatorV3Interface)45"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
                "base": "t_address",
                "encoding": "dynamic_array",
                "label": "address[]",
                "numberOfBytes": "32"
            },
            "t_contract(AggregatorV3Interface)45": {
                "encoding": "inplace",
                "label": "contract AggregatorV3Interface",
                "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            }
        }
    }
}
